# 병원 데이터 분석용 시스템 구현 - 기술 명세서

**프로젝트명:** 안전성 점수 계산 시스템 - 병원 통계 분석 데이터 처리  
**버전:** 1.0  
**작성일:** 2025.09.08  
**목적:** 전국 병원 정보를 피어슨 상관분석 계산에 활용하기 위한 분석용 테이블 구축

---

## 1. 프로젝트 개요

### 1.1 배경 및 목적
- **현재 상황**: `HOSPITAL_DATA` 원천 테이블이 이미 구축되어 있으며, 28개 컬럼의 전국 병원 정보를 포함
- **최종 목표**: 병원 데이터를 분석용 테이블로 변환하여 피어슨 상관분석에서 독립변수(의료기관 밀도) 데이터로 활용
- **처리 방식**: 원천 데이터에서 필요한 7개 컬럼만 추출하고, Kakao Map API를 통해 정확한 좌표 정보 계산하여 분석 전용 테이블 생성

### 1.2 핵심 특징
- **Kakao Map API 연동**: 주소 정보 기반 위도(LATITUDE), 경도(LONGITUDE) 필드 정확한 계산 및 저장
- **기존 좌표 무시**: 원천 데이터의 COORDINATE_X, COORDINATE_Y는 사용하지 않고 Kakao API로 완전히 새로 계산
- **병원 특화 주소 전처리**: 병원명, 의원명, 클리닉명 제거 및 API 인식률 향상을 위한 주소 정제
- **분석 전용 설계**: 제약조건 최소화, 순수 분석 목적의 테이블 구조
- **기존 자원 재활용**: 원천 데이터 접근을 위한 기존 Entity와 Repository 재사용
- **안정적 인코딩**: Spring Boot UriComponentsBuilder를 통한 한글 주소 자동 처리

---

## 2. 시스템 아키텍처 설계

### 2.1 전체 아키텍처 구조
5계층 구조의 분석용 데이터 처리 시스템:

1. **Entity 계층**: 분석용 데이터 구조 정의 (JPA 매핑)
2. **Repository 계층**: 데이터 접근
3. **Service 계층**: Kakao API 좌표 계산 서비스 (병원 특화)
4. **Processor 계층**: 데이터 변환 및 배치 처리 비즈니스 로직
5. **Main 계층**: 전체 프로세스 통합 관리 및 실행

### 2.2 데이터 플로우
```
원천 테이블(HOSPITAL_DATA) 
    ↓ [1000개씩 배치 조회]
데이터 변환 및 NULL 처리 
    ↓ [주소 정보 추출]
Kakao API 좌표 계산 
    ↓ [병원 특화 전처리]
분석용 테이블(ANALYSIS_HOSPITAL_DATA) 저장
    ↓
처리 결과 로깅 및 완료
```

---

## 3. 데이터베이스 설계

### 3.1 명명 규칙
- **분석용 테이블명**: `ANALYSIS_HOSPITAL_DATA`
- **시퀀스명**: `SEQ_ANALYSIS_HOSPITAL_DATA`
- **패키지 구조**: `com.WhereHouse.AnalysisData.hospital.*`
  - Entity: `*.entity`
  - Repository: `*.repository`
  - Service: `*.service`
  - Processor: `*.processor`

### 3.2 테이블 구조 설계
| 컬럼명 | 데이터 타입 | 원천 필드 | 설명 | NULL 허용 |
|--------|-------------|-----------|------|-----------|
| ID | NUMBER | (자동생성) | Primary Key | NO |
| BUSINESS_NAME | VARCHAR2(4000) | businessName | 사업장명 | YES |
| BUSINESS_TYPE_NAME | VARCHAR2(4000) | businessTypeName | 업종명 | YES |
| DETAILED_STATUS_NAME | VARCHAR2(4000) | detailedStatusName | 상세영업상태명 | YES |
| PHONE_NUMBER | VARCHAR2(4000) | phoneNumber | 전화번호 | YES |
| LOT_ADDRESS | VARCHAR2(4000) | lotAddress | 지번주소 | YES |
| ROAD_ADDRESS | VARCHAR2(4000) | roadAddress | 도로명주소 | YES |
| LATITUDE | NUMBER(10,7) | (API 계산) | 위도 | YES |
| LONGITUDE | NUMBER(10,7) | (API 계산) | 경도 | YES |

### 3.3 DDL 스크립트
```sql
-- 시퀀스 생성
CREATE SEQUENCE SEQ_ANALYSIS_HOSPITAL_DATA
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- 테이블 생성
CREATE TABLE ANALYSIS_HOSPITAL_DATA (
    ID NUMBER PRIMARY KEY,
    BUSINESS_NAME VARCHAR2(4000),
    BUSINESS_TYPE_NAME VARCHAR2(4000),
    DETAILED_STATUS_NAME VARCHAR2(4000),
    PHONE_NUMBER VARCHAR2(4000),
    LOT_ADDRESS VARCHAR2(4000),
    ROAD_ADDRESS VARCHAR2(4000),
    LATITUDE NUMBER(10,7),
    LONGITUDE NUMBER(10,7)
);
```

### 3.4 인덱스 설계
- Primary Key: ID (자동 생성)
- 검색 최적화: DETAILED_STATUS_NAME, BUSINESS_TYPE_NAME에 대한 인덱스 고려

---

## 4. 데이터 처리 규칙

### 4.1 데이터 추출 및 변환 규칙
- **영업상태 필터링**: 모든 상태 포함 (영업중, 폐업, 휴업, 취소 등 제한 없음)
- **데이터 범위**: 원천 테이블의 모든 행을 대상으로 처리
- **중복 처리**: 원천 데이터 각 행을 독립적으로 처리 (중복 검사 없음)
- **기존 좌표 무시**: COORDINATE_X, COORDINATE_Y 컬럼은 사용하지 않음

### 4.2 NULL 값 처리 규칙
| 데이터 타입 | NULL/빈값 처리 방식 |
|-------------|-------------------|
| 문자열 컬럼 | "데이터없음" |
| 숫자 컬럼 | 0 |
| 소수점 컬럼 | 0.0 |
| 날짜 컬럼 | LocalDate.of(1900, 1, 1) |

### 4.3 좌표 계산 규칙
- **처리 우선순위**: `roadAddress` (도로명주소) → `lotAddress` (지번주소) 순서
- **실패 처리**: 좌표 계산 실패 시 `LATITUDE`, `LONGITUDE` 모두 NULL 저장
- **API 설정**: `application.yml`의 `kakao.api.key` 사용
- **좌표 범위 검증**: 한국 영역 내 좌표 여부 확인 (위도: 33.0~38.7, 경도: 124.0~132.0)

---

## 5. 병원 특화 주소 전처리 명세

### 5.1 병원 관련 키워드 제거
제거 대상 키워드 목록:
- **의료기관 유형**: 병원, 의원, 한의원, 치과, 요양병원, 재활병원, 정신병원
- **클리닉 관련**: 클리닉, 센터, 의료센터, 건강센터
- **기타 의료 키워드**: 보건소, 한방, 치과의원, 정형외과, 내과, 외과, 산부인과, 소아과, 피부과, 안과, 이비인후과
- **일반 키워드**: 의료, 진료소, 요양원, 한방진료실

### 5.2 주소 전처리 단계별 시도 순서
1. **원본 주소**: 변경 없이 그대로 API 호출
2. **병원 키워드 제거**: 의료기관명 및 병원 관련 키워드 제거
3. **건물 정보 제거**: 건물명, 상가명, 층수 정보 제거
4. **괄호 내용 제거**: 괄호 안의 부가 정보 제거
5. **핵심 주소 추출**: 시/도/구/동/번지 수준까지만 남김

### 5.3 주소 정제 세부 규칙
- **특별시/광역시 표기 통일**: "서울특별시" → "서울시"
- **연속 공백 정리**: 여러 공백을 하나로 통합
- **특수문자 제거**: 끝부분의 쉼표, 하이픈 등 제거
- **최소 길이 보장**: 정제 후 5자 미만인 경우 원본 주소 사용

### 5.4 병원명 전처리 예시
```
원본: "서울시 강남구 역삼동 123-45 강남성모병원 3층"
1단계: "서울시 강남구 역삼동 123-45 강남성모병원 3층"
2단계: "서울시 강남구 역삼동 123-45 3층" (병원 제거)
3단계: "서울시 강남구 역삼동 123-45" (층수 제거)
```

---

## 6. 성능 및 운영 명세

### 6.1 배치 처리 설계
- **배치 크기**: 1000개씩 처리
- **메모리 관리**: 1000개 단위로 EntityManager flush 및 clear
- **트랜잭션**: 배치 단위 트랜잭션 관리
- **진행률 표시**: 1000개 처리마다 진행률 로깅 (`{처리완료}/{전체}` 형식)

### 6.2 로깅 및 모니터링 규칙
- **성공 로깅**: DEBUG 레벨, 사업장명 및 좌표 정보 포함
- **실패 로깅**: ERROR 레벨, 실패 원인, 주소, 사업장명 상세 기록
- **최종 통계**: 전체 처리 개수, 좌표 계산 성공/실패 개수 및 비율, 상세영업상태별 분포

### 6.3 에러 처리 정책
- **개별 실패 처리**: 특정 행 처리 실패 시 해당 행만 스킵, 전체 프로세스 계속 진행
- **데이터 저장 규칙**: 실패한 행은 분석용 테이블에 저장하지 않음
- **로그 상세도**: 실패 지점과 원인을 추적 가능한 수준으로 콘솔 기록
- **복구 메커니즘**: 별도 구현하지 않음 (수동 재실행 방식)

---

## 7. 외부 시스템 연동

### 7.1 Kakao Local API 연동 명세
- **API URL**: `https://dapi.kakao.com/v2/local/search/address.json`
- **인증 방식**: REST API 키를 Authorization 헤더에 포함 (`KakaoAK {API_KEY}`)
- **요청 형식**: GET 방식, query 파라미터로 주소 전달
- **응답 처리**: JSON 형식 응답에서 documents 배열의 첫 번째 결과 사용
- **우선순위**: road_address > address 순서로 좌표 추출

### 7.2 API 호출 최적화
- **인코딩 처리**: Spring Boot UriComponentsBuilder 자동 인코딩 활용
- **에러 핸들링**: HTTP 상태코드 확인, JSON 파싱 예외 처리
- **재시도 로직**: 주소 변형별 순차 시도 (최대 5회)

---

## 8. 품질 보증 및 검증

### 8.1 데이터 품질 검증 항목
- **전체 데이터 개수**: 원천 테이블 대비 처리 완료된 행 수 확인
- **좌표 완성도**: 좌표 보유 행 수 및 비율 확인
- **업종별 분포**: 각 의료업종별 기관 수 분포 확인
- **영업상태별 분포**: 각 영업상태별 기관 수 분포 확인
- **데이터 무결성**: 필수 필드 누락 여부 확인

### 8.2 검증 쿼리 예시
```sql
-- 전체 데이터 개수 확인
SELECT COUNT(*) FROM ANALYSIS_HOSPITAL_DATA;

-- 좌표 완성도 확인
SELECT 
    COUNT(*) AS TOTAL_COUNT,
    COUNT(LATITUDE) AS COORDINATE_COUNT,
    ROUND(COUNT(LATITUDE) * 100.0 / COUNT(*), 2) AS COMPLETION_RATE
FROM ANALYSIS_HOSPITAL_DATA;

-- 업종별 분포
SELECT BUSINESS_TYPE_NAME, COUNT(*) 
FROM ANALYSIS_HOSPITAL_DATA 
GROUP BY BUSINESS_TYPE_NAME 
ORDER BY COUNT(*) DESC;

-- 상세영업상태별 분포
SELECT DETAILED_STATUS_NAME, COUNT(*) 
FROM ANALYSIS_HOSPITAL_DATA 
GROUP BY DETAILED_STATUS_NAME 
ORDER BY COUNT(*) DESC;
```

---

## 9. 구현 순서 및 단계별 가이드

### 9.1 1단계: 환경 설정
- Oracle 테이블 및 시퀀스 생성 (DDL 실행)
- Kakao API 키 설정 (`application.yml`)
- 필요한 의존성 확인 (Spring Boot, JPA, Oracle Driver)

### 9.2 2단계: 기본 구조 구현
- 분석용 Entity 클래스 생성 (`AnalysisHospitalData`)
- Repository 인터페이스 정의 (기본 CRUD)
- 기존 원천 데이터 Entity 및 Repository import (`HospitalData`)

### 9.3 3단계: 좌표 계산 서비스 구현
- Kakao API 호출 로직 구현
- 병원 특화 주소 전처리 로직 구현

### 9.4 4단계: 데이터 처리 로직 구현
- 원천 데이터 조회 및 변환 로직
- 1000개 단위 배치 처리 구현
- NULL 값 처리 및 좌표 계산 연동

### 9.5 5단계: 통합 및 테스트
- Main Processor에 병원 처리 로직 통합
- 전체 프로세스 실행 및 결과 검증
- 로그 분석 및 성능 최적화

---

## 10. 예상 처리 결과 및 성공 기준

### 10.1 성공 기준
- **데이터 처리율**: 원천 데이터 대비 95% 이상 처리 완료
- **좌표 완성도**: 전체 데이터의 85% 이상 좌표 정보 보유
- **처리 성능**: 1만 건 기준 30분 이내 처리 완료
- **에러율**: 전체 처리 중 5% 미만의 실패율

### 10.2 예상 결과 예시
```
=== 병원 데이터 분석용 테이블 생성 작업 완료 ===
- 원천 데이터: 85,432 개
- 데이터 변환: 성공 84,789 개, 실패 643 개
- 좌표 계산: 성공 73,245 개 (86.4%), 실패 11,544 개 (13.6%)
- 업종별 분포:
  의원 : 42,567 개
  치과의원 : 18,234 개
  한의원 : 12,890 개
  병원 : 8,456 개
  기타 : 2,642 개
- 상세영업상태별 분포:
  영업 : 71,234 개
  폐업 : 9,567 개
  휴업 : 3,456 개
  기타 : 532 개
- 처리 시간: 42분 18초
```

### 10.3 핵심 구현 포인트
1. **기존 좌표 데이터 무시**: COORDINATE_X, COORDINATE_Y는 완전히 무시하고 Kakao API로만 계산
2. **병원 특화 전처리**: 의료기관명과 진료과목 정보를 체계적으로 제거
3. **의료업종 보존**: BUSINESS_TYPE_NAME을 통해 병원, 의원, 치과 등 구분 유지
4. **영업상태 전수 포함**: 모든 영업상태의 의료기관을 분석 대상에 포함

이 명세서는 외부 참조 없이 병원 데이터 분석용 시스템을 완전히 구현할 수 있는 모든 정보를 포함합니다.