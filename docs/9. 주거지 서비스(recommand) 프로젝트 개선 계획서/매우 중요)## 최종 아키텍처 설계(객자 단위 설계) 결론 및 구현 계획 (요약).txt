## 최종 아키텍처 설계 결론 및 구현 계획 (요약)
1. 문제 정의와 최종 목표
초기 문제: '구 단위'의 거시적 범죄 데이터와 '매물 단위'의 미시적 환경 데이터 사이의 입도(Granularity) 불일치 문제를 해결하고, 사용자에게 빠르고 정확한 '초지역적(Hyper-local) 안전성 점수'를 제공해야 한다.

최종 목표: 이 문제를 해결하기 위한 두 가지 대표적인 아키텍처, 즉 **'배치 기반 격자 시스템'**과 **'실시간 반경 조회 시스템'**을 모두 구현한다. 이후 성능과 정확성을 직접 벤치마킹하여, 각 방식의 기술적 트레이드오프(Trade-off)를 명확히 증명하고 설명한다.

2. 구현 및 비교할 두 가지 아키텍처
[Model A] 배치 기반 격자(Grid) 시스템

핵심 개념: 사전 처리 (Pre-processing). 모든 계산을 미리 끝내고, 사용자는 저장된 결과만 조회한다.

동작 방식:

(Batch) DB에 저장된 전체 시설물 데이터(CCTV, 편의점 등)에 공간 인덱스를 적용한다.

배치 작업을 통해 서울시 전체를 약 6만 개의 격자(Grid)로 나누고, 공간 인덱스를 활용해 각 격자별 안전성 점수를 미리 전부 계산한다.

계산된 격자 ID - 점수 데이터를 Redis 같은 캐시 저장소에 저장한다.

(Real-time) 사용자 요청 시, 매물이 속한 격자의 점수를 캐시에서 **단순 조회(Lookup)**하여 즉시 반환한다.

장점: 압도적인 실시간 성능, 안정성, 비용 효율성.

단점: 점수가 격자 단위의 근사치이며, 실제 매물의 정확한 위치를 100% 반영하지는 못함.

[Model B] 실시간 반경(Radius) 조회 시스템

핵심 개념: 동적 계산 (Dynamic Calculation). 사용자 요청이 있을 때마다 필요한 점수만 실시간으로 계산한다.

동작 방식:

(Batch) DB에 전체 시설물 데이터를 저장하고 공간 인덱스를 적용하는 것은 동일하다.

(Real-time) 사용자 요청 시, 매물의 정확한 좌표를 기준으로 DB에 직접 **실시간 공간 쿼리(Spatial Query)**를 실행한다.

반경 내 시설물 개수와 가장 가까운 경찰서 거리 등을 동적으로 계산하여 점수를 즉시 산출한다.

장점: 개별 매물 위치를 완벽하게 반영하는 가장 높은 정확성.

단점: 심각한 실시간 DB 부하. 동시 사용자 증가 시 성능이 급격히 저하되어 서비스 전체가 마비될 수 있는 확장성의 한계.

3. 성능과 정확성의 트레이드오프 분석 계획
두 모델 구현 후, 다음과 같은 지표를 측정하여 비교 분석 자료를 작성한다.

성능 (Performance)

응답 시간 (ms): 매물 1개 조회 시 최종 점수가 반환되기까지 걸리는 시간.

초당 처리량 (TPS): 부하 테스트 툴(nGrinder, JMeter 등)을 사용하여 서버가 초당 몇 개의 요청을 안정적으로 처리하는지 측정.

자원 사용량 (Resource Usage)

동일한 요청 수에 대한 DB CPU 및 메모리 사용량 비교.

정확성 (Accuracy)

경계 지역에 위치한 매물의 점수가 각 모델에서 어떻게 다르게 계산되는지 비교 분석.

4. 2단계 포트폴리오 구현 전략
[1단계: 공통 기반 시스템 구축]

모든 시설물(CCTV, 편의점, 경찰서 등) 데이터를 수집하여 DB 테이블에 적재한다.

각 테이블의 좌표 컬럼에 공간 인덱스를 생성한다.

'구 단위' 범죄율을 기반으로 한 '거시적 안전도' 점수 계산 로직을 구현한다.

두 모델의 결과를 반환할 공통 API 엔드포인트(GET /api/safety-score)를 설계한다. (e.g., ?mode=batch vs ?mode=realtime 쿼리 파라미터로 분기)

[2단계: 두 아키텍처 개별 구현 및 비교]

Model A (배치): Spring Batch 또는 @Scheduled를 이용해 격자 점수를 미리 계산하고 Redis에 저장하는 로직을 구현한다.

Model B (실시간): 요청 시 DB에 직접 공간 쿼리를 실행하여 점수를 계산하는 서비스 로직을 구현한다.

부하 테스트를 통해 각 모델의 성능 지표를 측정한다.

결과를 README 파일에 그래프와 표를 포함하여 상세히 기록하고, 각 아키텍처의 장단점 및 어떤 상황에 어떤 모델이 적합한지에 대한 자신의 기술적인 결론을 명확히 서술한다.

5. 포트폴리오 가치
이 계획대로 포트폴리오를 완성하면, 단순 기능 구현자를 넘어 시스템의 특성을 이해하고, 성능과 비용, 안정성을 모두 고려하여 최적의 아키텍처를 설계하고 증명할 수 있는 엔지니어임을 보여줄 수 있습니다. 이는 다른 어떤 지원자와도 비교할 수 없는 강력한 경쟁력이 될 것입니다.