spring:
  application:
    name: wherehouse

  # 데이터베이스 연결 설정
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    #url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle SID 기반 URL (로컬 서버)
    url: jdbc:oracle:thin:@43.202.178.156:1521:xe # Oracle SID 기반 URL (AWS 서버 - 확인 완료)
    username: SCOTT
    password: tiger

    # HikariCP 커넥션 풀 설정
    hikari:
      auto-commit: false
      idle-timeout: 30000  # 30초 후 미사용 커넥션 종료
      max-lifetime: 1800000  # 30분 후 커넥션 강제 종료

#  # Redis 연결 설정 (메모리 사용량 최적화)
#  redis:
#    #host: 172.30.248.154  # Local(no 127.0.0.1)
#    host: 43.202.178.156 # (aws - 확인 완료)
#    port: 6379
#    timeout: 3000ms  # 3초 타임아웃 (무제한에서 변경)
#    lettuce:
#      pool:
#        max-active: 20   # 동시에 처리 가능한 최대 요청 개수 (100->20으로 축소)
#        max-idle: 10     # 최대 유휴 커넥션 개수 (50->10으로 축소)
#        min-idle: 5      # 최소 유휴 커넥션 개수 (10->5로 축소)
#        max-wait: 2000ms # 대기 시간 제한 설정 (-1ms에서 변경)
#        time-between-eviction-runs: 30s  # 유휴 커넥션 정리 주기 (10s->30s로 변경)
  data:
    redis:
      host: 43.202.178.156
      port: 6379
      timeout: 3000ms
    # 나머지 설정은 Spring Boot 기본값 사용

  # Jackson JSON 처리 설정 (Spring Boot 2.7.x 호환)
  jackson:
    # ========== JSON 직렬화/역직렬화 핵심 설정 ==========
    property-naming-strategy: SNAKE_CASE
    default-property-inclusion: NON_NULL
    date-format: "yyyy-MM-dd HH:mm:ss"
    time-zone: Asia/Seoul

    # ========== JSON → Java 객체 변환 (Deserialization) 설정 ==========
    deserialization:
      fail-on-unknown-properties: true
      accept-empty-string-as-null-object: false
      accept-empty-array-as-null-object: false

    # ========== Java 객체 → JSON 변환 (Serialization) 설정 ==========
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
      order-map-entries-by-keys: true

  # JPA/Hibernate 설정 (Spring Boot 2.7.x 호환)
  jpa:
    hibernate:
      ddl-auto: none # 개발 환경에서는 update, 운영 환경에서는 none 추천
    properties:
      hibernate:
        dialect: org.hibernate.dialect.Oracle12cDialect # Oracle12c 방언 사용
        format_sql: true # SQL 포맷 정리
        default_batch_fetch_size: 50 # Batch Fetch 최적화
        jdbc.fetch_size: 100 # JDBC fetch size 설정
        cache.use_query_cache: false # Hibernate Query 캐시 비활성화
        # Spring Boot 2.7.x에서 사용하는 네이밍 전략
        physical_naming_strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
    open-in-view: false # Lazy Loading 오류 방지 (OSIV OFF)

  # Spring MVC 설정 (Spring Boot 2.7.x 호환)
  mvc:
    view:
      prefix: /WEB-INF/view/
      suffix: .jsp
    # Spring Boot 2.7.x에서는 pathmatch 설정 불필요 (기본적으로 ANT 패턴 사용)

  # 멀티파트 파일 업로드 설정
  servlet:
    multipart:
      max-file-size: 10MB      # 단일 파일 최대 크기
      max-request-size: 10MB   # 전체 요청 최대 크기

# MyBatis 설정
mybatis:
  mapper-locations: classpath:/mapper/*Mapper.xml
  type-aliases-package: com.wherehouse.information.model
  configuration:
    jdbc-type-for-null: null

# 서버 설정
server:
  port: 8185
  servlet:
    context-path: /wherehouse  # Spring Boot 2.7.x에서는 외장 Tomcat과 정상 작동

  # HTTP 에러 응답 설정
  error:
    # validation 에러 메시지를 응답에 포함
    include-message: always
    # binding 에러 상세 정보 포함 (개발 환경에서 유용)
    include-binding-errors: always

# API 지점 설정
# 국토부 API 설정
molit:
  rent-api:
    base-url: https://apis.data.go.kr/1613000/RTMSDataSvcAptRent

# 로깅 설정
logging:
  file:
    name: log/wherehouse.log  # 프로젝트 루트 디렉토리를 기준으로 상대경로로써 로그 파일 위치 설정
  level:
    root: INFO  # 기본 로그 레벨 설정
    # 메모리 누수 관련 로그 추가
    org.apache.catalina: WARN
    org.apache.tomcat: WARN

  # 로그 출력 형식 설정
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# ========== Spring Boot 2.7.x 호환성 개선 ==========
#
# 1. Redis 연결 풀 최적화로 메모리 사용량 감소
# 2. Jackson 설정 단순화
# 3. JPA/Hibernate 방언을 Oracle12c로 변경
# 4. MVC pathmatch 설정 제거 (2.7.x에서는 기본값 사용)
# 5. 컨텍스트 경로 설정 유지 (2.7.x에서는 외장 Tomcat과 정상 작동)