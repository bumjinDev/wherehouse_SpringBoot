// R-05: 데이터 통합 및 필터링 결과
package com.wherehouse.logger.result.R05;

import lombok.Data;
import lombok.Builder;

/**
 * R-05 단계 전체 결과를 담는 메인 DTO
 *
 * R-03(DB 조회)과 R-04(외부 API)에서 얻은 데이터를 통합하고,
 * 사용자가 요청한 반경 내로 필터링하는 전체 과정의 결과를 기록한다.
 *
 * 처리 흐름:
 * 1. CCTV 데이터 통합 및 필터링
 *    - 9개 격자에서 조회한 CCTV를 단일 리스트로 통합
 *    - Haversine 거리 계산으로 반경 내 CCTV만 필터링
 *
 * 2. 파출소 조회 (B-01 병목)
 *    - Native Query로 가장 가까운 파출소 1개 조회
 *    - ST_Distance_Sphere 함수 사용
 *
 * 3. 편의시설 필터링
 *    - R-04에서 받은 편의시설 데이터를 반경 내로 필터링
 *    - 카테고리별 AmenityDetailDto 생성
 *
 * 4. 외부 API 데이터 통합
 *    - 주소, 검거율 정보 복사
 *
 * 설계 목적:
 * - 9-Block 그리드 조회로 얻은 과다 데이터를 정확한 반경으로 필터링
 * - 성능 병목 지점(파출소 조회) 측정
 */
@Data
@Builder
public class R05FilterResult {

    // ============================================
    // 입력 정보
    // ============================================

    /**
     * 사용자가 요청한 검색 반경 (미터)
     *
     * 예시: 500 (반경 500m)
     *
     * 이 값을 기준으로 모든 필터링이 수행됨
     */
    private int requestRadius;

    // ============================================
    // CCTV 필터링 결과
    // ============================================

    /**
     * CCTV 통합 및 필터링 결과
     *
     * 포함 정보:
     * - 필터 전후 CCTV 개수
     * - 총 카메라 대수
     * - 필터율
     */
    private R05CctvFilterResult cctvFilter;

    // ============================================
    // 파출소 조회 결과 (B-01 병목)
    // ============================================

    /**
     * 파출소 Native Query 실행 결과
     *
     * 포함 정보:
     * - 쿼리 실행 시간 (나노초)
     * - 발견 여부
     * - 가장 가까운 파출소 정보
     *
     * 병목 지점: 이 쿼리가 성능 저하의 주요 원인
     */
    private R05PoliceQueryResult policeQuery;

    // ============================================
    // 편의시설 필터링 결과
    // ============================================

    /**
     * 편의시설 필터링 결과
     *
     * 포함 정보:
     * - 필터 전후 카테고리별 장소 개수
     * - 전체 장소 개수
     * - 필터율
     */
    private R05AmenityFilterResult amenityFilter;

    // ============================================
    // 실행 상태
    // ============================================

    /**
     * R-05 단계 전체 성공 여부
     * - true: 모든 작업 정상 완료
     * - false: 치명적 오류 발생
     */
    private boolean isSuccess;

    /**
     * 에러 메시지 (실패 시에만 값 존재)
     */
    private String errorMessage;
}